
* Terminal
**Setting default bash shell
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

#+END_SRC

* Org
** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
   
** basic 
#+BEGIN_SRC emacs-lisp
(setq org-src-windows-setup 'curent-window)

#+END_SRC
** subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)

#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init(which-key-mode))


#+END_SRC

* beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))


#+END_SRC
  

* IDO
** enable  ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flec-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC
** ido vertical
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
:ensure t
:init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

#+END_SRC
** smex 
#+BEGIN_SRC emacs-lisp
(use-package smex
:ensure t
:init (smex-initialize)
:bind
("M-x" . smex))


#+END_SRC
** swithc buffers 
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "C-x C-b") 'ido-switch-buffer)

#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind
("M-s" . avy-goto-char))

#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
(interactive)
(find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
(interactive)
(org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
:ensure t
:init (rainbow-mode 1))


#+END_SRC
* switch window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
:ensure t
:config
(setq switch-window-input-style 'minibuffer)
(setq switch-window-increase 4)
(setq switch-window-threshold 2)
(setq switch-window-shortcut-style 'qwerty)
(setq switch-window-qwerty-shortcuts
'("a" "s" "d" "f" "j" "k" "l"))
 :bind
([remap other-window] . switch-window))
#+END_SRC
* window splitting 
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
(interactive)
(split-window-below)
(balance-windows)
(other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
(interactive)
(split-window-right)
(balance-windows)
(other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)


#+END_SRC
